#version 330 core

// Input vertex data, different for all executions of this shader.
// We could identify these locations dynamically with
// glGetAttribLocation(shader, 'vertexPosition_modelspace')
// etc.
layout(location = 0) in vec4 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec4 vertexNormal_modelspace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform vec4 LightPosition_worldspace;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec4 Position_worldspace;
out vec4 Normal_cameraspace;
out vec4 EyeDirection_cameraspace;
out vec4 LightDirection_cameraspace;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * (vertexPosition_modelspace);
        
	// Position of the vertex, in worldspace : M * position
	Position_worldspace = (M * (vertexPosition_modelspace));
	
	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	vec4 vertexPosition_cameraspace = ( V * M * (vertexPosition_modelspace));
	EyeDirection_cameraspace = vec4(0,0,0,1) - vertexPosition_cameraspace;

	// Vector that goes from the vertex to the light, in camera space.
        // Camera does not move with model, so leave M out
	vec4 LightPosition_cameraspace = ( V * LightPosition_worldspace);
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
	
	// Normal of the the vertex, in camera space
	Normal_cameraspace = V * M * vertexNormal_modelspace; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;
	
}

